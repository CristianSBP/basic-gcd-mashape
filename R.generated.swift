//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `CardCollectionViewCell`.
    static let cardCollectionViewCell = _R.nib._CardCollectionViewCell()
    /// Nib `ClassesTableViewCell`.
    static let classesTableViewCell = _R.nib._ClassesTableViewCell()
    /// Nib `FactionsTableViewCell`.
    static let factionsTableViewCell = _R.nib._FactionsTableViewCell()
    /// Nib `LocalesTableViewCell`.
    static let localesTableViewCell = _R.nib._LocalesTableViewCell()
    /// Nib `PatchTableViewCell`.
    static let patchTableViewCell = _R.nib._PatchTableViewCell()
    /// Nib `QualitiesTableViewCell`.
    static let qualitiesTableViewCell = _R.nib._QualitiesTableViewCell()
    /// Nib `QualityCollectionViewCell`.
    static let qualityCollectionViewCell = _R.nib._QualityCollectionViewCell()
    /// Nib `RacesTableViewCell`.
    static let racesTableViewCell = _R.nib._RacesTableViewCell()
    /// Nib `SetsTableViewCell`.
    static let setsTableViewCell = _R.nib._SetsTableViewCell()
    /// Nib `TypesTableViewCell`.
    static let typesTableViewCell = _R.nib._TypesTableViewCell()
    
    /// `UINib(name: "CardCollectionViewCell", in: bundle)`
    static func cardCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cardCollectionViewCell)
    }
    
    /// `UINib(name: "ClassesTableViewCell", in: bundle)`
    static func classesTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.classesTableViewCell)
    }
    
    /// `UINib(name: "FactionsTableViewCell", in: bundle)`
    static func factionsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.factionsTableViewCell)
    }
    
    /// `UINib(name: "LocalesTableViewCell", in: bundle)`
    static func localesTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.localesTableViewCell)
    }
    
    /// `UINib(name: "PatchTableViewCell", in: bundle)`
    static func patchTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.patchTableViewCell)
    }
    
    /// `UINib(name: "QualitiesTableViewCell", in: bundle)`
    static func qualitiesTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qualitiesTableViewCell)
    }
    
    /// `UINib(name: "QualityCollectionViewCell", in: bundle)`
    static func qualityCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qualityCollectionViewCell)
    }
    
    /// `UINib(name: "RacesTableViewCell", in: bundle)`
    static func racesTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.racesTableViewCell)
    }
    
    /// `UINib(name: "SetsTableViewCell", in: bundle)`
    static func setsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.setsTableViewCell)
    }
    
    /// `UINib(name: "TypesTableViewCell", in: bundle)`
    static func typesTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.typesTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `InfoTableViewController`, and contains static references to 1 segues.
    struct infoTableViewController {
      /// Segue identifier `toCards`.
      static let toCards: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, InfoTableViewController, CardsCollectionViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toCards")
      
      /// Optionally returns a typed version of segue `toCards`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toCards(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, InfoTableViewController, CardsCollectionViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.infoTableViewController.toCards, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    struct _CardCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CardCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CardCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ClassesTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ClassesTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClassesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClassesTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _FactionsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FactionsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FactionsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FactionsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _LocalesTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LocalesTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LocalesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LocalesTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PatchTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PatchTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PatchTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PatchTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _QualitiesTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QualitiesTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> QualitiesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QualitiesTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _QualityCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QualityCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> QualityCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QualityCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _RacesTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RacesTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RacesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RacesTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SetsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SetsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SetsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SetsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TypesTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TypesTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TypesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TypesTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
